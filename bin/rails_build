#!/usr/bin/env ruby

# file : ./bin/rails_build

END{ 

  RailsBuild::CLI.build!  

}


module RailsBuild
  class CLI
    def CLI.usage
      <<-__
        NAME
          rails_build

        SYNOPSIS
          a small, simple, bullet proof, and very fast static site generator built on rails 5

        USAGE
          rails_build [rails_root] *(options)

          options:
            --help, -h       : this message
            --rails_root,--r : specifiy the RAILS_ROOT, default=./
            --parallel,--p   : how many requests to make in parallel, default=n_cpus/2
            --env,--e        : speciify the RAILS_ENV, default=production
            --url, -u        : provide the url of the build server, do *not* start separate one
            --server, -s     : passenger | puma, default=passenger
            --log, -l        : specify the logfile, default=STDERR
            --verbose, -v    : turn on verbose logging
      __
    end

    def CLI.opts
      GetoptLong.new(
        [ '--help'       , '-h' , GetoptLong::NO_ARGUMENT ]        , 
        [ '--url'        , '-u' , GetoptLong::REQUIRED_ARGUMENT ] , 
        [ '--server'      , '-s' , GetoptLong::REQUIRED_ARGUMENT ] , 
        [ '--parallel'   , '-p' , GetoptLong::REQUIRED_ARGUMENT ] , 
        [ '--rails_root' , '-r' , GetoptLong::REQUIRED_ARGUMENT ] , 
        [ '--env'         , '-e' , GetoptLong::REQUIRED_ARGUMENT ] , 
        [ '--log'         , '-l' , GetoptLong::REQUIRED_ARGUMENT ] , 
        [ '--verbose'     , '-v' , GetoptLong::NO_ARGUMENT ]        , 
      )
    end

    def build!
      prepare!

      mkdir!

      start_server! unless url

      clear_cache!

      extract_urls! url_for('/rails_build/configuration.json')

      precompile_assets!

      rsync_public!

      parallel_build!

      finalize!
    end

  #
    def CLI.build!(*args, &block)
      new(*args, &block).build!
    end

  #
    attr_accessor :rails_root
    attr_accessor :url
    attr_accessor :server
    attr_accessor :directory
    attr_accessor :uuid
    attr_accessor :id
    attr_accessor :env
    attr_accessor :parallel

  #
    def initialize(*args, &block)
      setup!

      @args = parse_args! 

      @opts = parse_opts!

      if @opts[:help]
        usage!
        exit(42)
      end
    end

  #
    def setup!
    #
      STDOUT.sync = true
      STDERR.sync = true

    #
      ENV['SPRING_DISABLE'] = 'true'
      ENV['DISABLE_SPRING'] = 'true'

    #
      %w[
        fileutils pathname thread socket timeout time uri etc open-uri securerandom logger getoptlong rubygems json
      ].each do |stdlib|
        require(stdlib)
      end
    end

  #
    def prepare!
    #
      @rails_root = find_rails_root!(@args[0] || '.')

    #
      Dir.chdir(@rails_root)

    #
      if File.exists?('./Gemfile')
        require 'bundler/setup'
        Bundler.setup(:require => false)
      end

    #
      @default_server =
        begin
          require 'phusion_passenger'
          'passenger'
        rescue LoadError
          'puma'
        end

    #
      %w[
        parallel persistent_http
      ].each do |gem|
        begin
          require(gem)
        rescue LoadError
          abort "add gem '#{ gem }' to your Gemfile"
        end
      end

    #
      begin
        require('pry')
      rescue LoadError
        nil
      end

    #
      @logger = Logger.new(@opts[:log] || STDERR)

      @uuid     = ENV['RAILS_BUILD']
      @time     = ENV['RAILS_BUILD_TIME']
      @url      = @opts[:url]             || ENV['RAILS_BUILD_URL']
      @server   = @opts[:server]          || ENV['RAILS_BUILD_SERVER']
      @env      = @opts[:env]             || ENV['RAILS_BUILD_ENV']      || ENV['RAILS_ENV']
      @parallel = @opts[:parallel]        || ENV['RAILS_BUILD_PARALLEL']
      @verbose  = @opts[:verbose]         || ENV['RAILS_BUILD_VERBOSE']

      @uuid     ||= SecureRandom.uuid
      @time     ||= Time.now.utc
      @server   ||= @default_server
      @env      ||= 'production'
      @parallel ||= (Etc.nprocessors / 2)

      unless @time.is_a?(Time)
        @time = Time.parse(@time.to_s).utc
      end

      @parallel = @parallel.to_i

      if ENV['RAILS_BUILD_DIRECTORY']
        @build_directory = File.expand_path(ENV['RAILS_BUILD_DIRECTORY']) 
      else
        @build_directory = File.join(@rails_root, 'builds')
      end

      @directory = File.join(@build_directory, @uuid)

      ENV['RAILS_ENV']        = @env
      ENV['RAILS_BUILD']      = @uuid
      ENV['RAILS_BUILD_ENV']  = @env
      ENV['RAILS_BUILD_TIME'] = @time.httpdate

      @urls = []

      @started_at = Time.now

      unless(( server = Server.for(@server, self) ))
        abort "no server found for server=#{ @server.inspect }"
      else
        @server = server
      end
    end

  #
    def find_rails_root!(path)
      rails_root = File.expand_path(path.to_s)

      loop do
        is_rails_root = %w[ app lib config public ].all?{|dir| test(?d, File.join(rails_root, dir))}

        if is_rails_root
          return(rails_root)
        else
          rails_root = File.dirname(rails_root)
          break if rails_root == '/'
        end
      end

      abort("could not find a rails_root in or above #{ path }!?")
    end

  #
    def parse_args!
      @args = ARGV.map{|arg| "#{ arg }"}
    end

  #
    def parse_opts!
      @opts = Hash.new

      CLI.opts.each do |opt, arg|
        key, val = opt.split('--').last, arg
        @opts[key.to_s.to_sym] = (val == '' ? true : val)
      end

      @opts
    end

  #
    def usage!
      lines = CLI.usage.strip.split(/\n/)
      n       = lines[1].to_s.scan(/^\s+/).size
      indent = ' ' * n
      re     = /^#{ Regexp.escape(indent) }/
      usage  = lines.map{|line| line.gsub(re, '')}.join("\n")
      STDERR.puts(usage)
    end

  #
    def mkdir!
      FileUtils.rm_rf(@directory)
      FileUtils.mkdir_p(@directory)
      log(:info, "directory: #{ @directory }")
    end

  #
    def start_server!
      @url =
        nil

      @port =
        nil

      ports =
        (2000 .. 9000).to_a

      start_server, stop_server = nil

      @server.setup!

      ports.each do |port|
        next unless port_open?(port)

        start_server = @server.start_command_for(port)
        stop_server = @server.stop_command_for(port)

        `#{ stop_server } 2>&1`.strip

        log(:info, "cmd: #{ start_server }")
        server_output = `#{ start_server } 2>&1`.strip

        log(:info, "status: #{ $?.exitstatus }")

        t = Time.now.to_f
        timeout = 10
        i = 0
        url = nil

        loop do
          i += 1

          begin
            url = "http://localhost:#{ port }"
            open(url){|socket| socket.read}
            @url = url
            @port = port
            break
          rescue Object => e
            if i > 2
              log :error, "url: #{ url } ->"
              log :error, "#{ e.message }(#{ e.class })\n"
              log :error, "#{ server_output }\n\n"
            end

            if((Time.now.to_f - t) > timeout)
              abort("could not start server inside of #{ timeout } seconds via\n\n#{ start_server }\n\n;-/")
            else
              sleep(rand(0.42))
            end
          end
        end

        break if @url
      end

    # barf if server could not be started
    #
      unless @url
        abort("could not start server on any of ports #{ ports.first } .. #{ ports.last }")
      else
        log(:info, "started server on #{ @url }")
      end

    # set assassins to ensure the server daemon never outlives the build script
    # no matter how it is killed (even -9)
    #
      at_exit{
        log(:info, "cmd: #{ stop_server }")
        `#{ stop_server } >/dev/null 2>&1`
        log(:info, "status: #{ $?.exitstatus }")
        log(:info, "stopped server #{ @url }")
        @server.cleanup!(:port => @port)
      }

      assassin = <<-__
        pid = #{ Process.pid }

        4242.times do
          begin
            Process.kill(0, pid)
          rescue Object => e
            if e.is_a?(Errno::ESRCH)
              `#{ stop_server } >/dev/null 2>&1`
              Process.kill(-15, pid) rescue nil
              sleep(rand + rand)
              Process.kill(-9, pid) rescue nil
            end
            exit
          end
          sleep(1 + rand)
        end
      __
      IO.binwrite('tmp/build-assassin.rb', assassin)
      cmd = "nohup ruby tmp/build-assassin.rb >/dev/null 2>&1 &"
      system cmd

    #
      @started_at = Time.now
      @url
    end

  #
    def extract_urls!(build_url)
      urls = []

      code, body = http_get(build_url)

      unless code == 200
        raise "failed to get build urls from #{ build_url }"
      end

      @_build = JSON.parse(body)

      unless @_build['urls'].is_a?(Array)
        raise "failed to find any build urls at #{ build_url } - edit ./config/rails_build.rb # see README"
      end

      urls = @_build['urls']

      urls.map!{|url| url_for(url)}

      log(:info, "extracted #{ urls.size } url(s) to build from #{ build_url }")

      @urls = urls
    end

  #
    def clear_cache!
      #spawn "rake tmp:cache:clear"
      spawn "rails runner 'Rails.cache.clear'"
    end

  #
    def precompile_assets!
      @asset_dir = File.join(@rails_root, "public/assets")
      @asset_tmp = false

      if test(?d, @asset_dir)
        @asset_tmp = File.join(@rails_root, "tmp/assets-build-#{ @uuid }")
        FileUtils.mv(@asset_dir, @asset_tmp) 
      end

      spawn "RAILS_ENV=production rake assets:precompile"

      assets = Dir.glob(File.join(@rails_root, 'public/assets/**/**'))

      log(:info, "precompiled #{ assets.size } assets")

      ensure_non_digested_assets_also_exist!(assets)
    end

  #
    def rsync_public!
      commands = [
        "rsync -avz ./public/ #{ @directory }",
        "cp -ru ./public/ #{ @directory }"
      ]

      rsynced = false

      commands.each do |command|
        begin
          spawn(command)
          rsynced = true
          break
        rescue
          next
        end
      end

      unless rsynced
        abort "failed all of `#{ commands.join(' | ') }`"
      end

      count = 0
      
      Dir.glob(File.join(@directory, '**/**')).each{ count += 1 }

      log(:info, "rsync'd #{ count } files")

      if @asset_tmp
        FileUtils.rm_rf(@asset_dir)
        FileUtils.mv(@asset_tmp, @asset_dir) 
      end
    end

  #
    def parallel_build!(n = nil)
      n ||= @parallel

      stats = {
        :success => [], :missing => [], :failure => [],
      }

      times = Queue.new

      avg = nil

      Thread.new do
        Thread.current.abort_on_exception = true
        total = 0.0
        n = 0
        loop do
          while(time = times.pop)
            total += time
            n += 1
            avg = (total / n).round(2) 
          end
        end
      end

      a = Time.now.to_f

      _stats =
        Parallel.map(@urls.uniq, :in_threads => n) do |url|
          uri = uri_for(url)
          path = path_for(uri)
          upath = uri.path
          rpath = relative_path(path, :from => @directory)

          _a = Time.now.to_f

          code, body = http_get(uri)

          _b = Time.now.to_f
          _e = (_b - _a).round(2)

          times.push(_e)

          label = "#{ code } @ (t̄:#{ avg }s)"

          case code
            when 200
              write_path(path, body)
              log(:info, "#{ label }: #{ upath } -> #{ rpath } (t:#{ _e }s)")
              [:success, url]
            when 404
              log(:error, "#{ label }: #{ upath }")
              [:missing, url]
            when 500
              log(:error, "#{ label }: #{ upath }")
              [:failure, url]
            else
              log(:error, "#{ label }: #{ upath }")
              [:failure, url]
          end
        end
        
      _stats.each{|stat, url| stats[stat].push(url)}

      b = Time.now.to_f

      borked = false

      if stats[:missing].size > 0
        borked = true
        log(:error, "missing on #{ stats[:missing].size } urls")
      end

      if stats[:failure].size > 0
        borked = true
        log(:error, "failure on #{ stats[:failure].size } urls")
      end

      if borked
        exit(1)
      end

      elapsed =  b - a
      n = @urls.size
      rps = (n / elapsed).round(2)

      log(:info, "downloaded #{ n } urls at ~#{ rps }/s")

      @urls
    end

  #
    def finalize!
      @finished_at = Time.now
      elapsed = (@finished_at.to_f - @started_at.to_f)
      log(:info, "build time - #{ hms(elapsed) }")
      on_netlify = ENV['DEPLOY_PRIME_URL'].to_s =~ /netlify/
      strategy = on_netlify ? 'cp_r' : 'ln_s' # netlify refuses to deploy from a symlink ;-/ # FIXME
      build = File.join(@rails_root, 'build')
      FileUtils.rm_rf(build)
      FileUtils.send(strategy, @directory, build)
      log(:info, "preview with `static ./build/` # brew install node-static")
    end

    def http_connection
      @http_connection ||= (
        PersistentHTTP.new({
          :url          => @url,
          :pool_size    => (@parallel + 1),
          :logger        => (@verbose ? @logger : nil),
          :pool_timeout => 10,
          :warn_timeout => 1,
          :force_retry  => true,
        })
      )
    end

    def http_get(url)
      request = Net::HTTP::Get.new(url)
      response = http_connection.request(request)

      if response.is_a?(Net::HTTPRedirection)
        location = response['Location']
        if location.to_s == url.to_s
          log(:fatal, "circular redirection on #{ url }")
          exit(1)
        end
        return http_get(location)
      end

      code = response.code.to_i rescue 500
      body = response.body.to_s rescue ''

      [code, body]
    end

  #
    def to_s
      @directory.to_s
    end

  #
    def log(level, *args, &block)
      @logger.send(level, *args, &block)
    end

  #
    def path_for(url)
      uri = uri_for(url)

      case
        when uri.path=='/' || uri.path=='.'
          path = File.join(@directory, 'index.html')
        else
          path = File.join(@directory, uri.path)
          dirname, basename = File.split(path)
          base, ext = basename.split('.', 2)
          if ext.nil?
            path = File.join(path, 'index.html')
          end
      end
      path
    end

  #
    def write_path(path, body)
      FileUtils.mkdir_p(File.dirname(path))
      IO.binwrite(path, body)
    end

  #
    def ensure_non_digested_assets_also_exist!(assets)
      re = /(-{1}[a-z0-9]{32}*\.{1}){1}/

      assets.each do |file|
        next if File.directory?(file) || file !~ re
        source = file.split('/')
        source.push(source.pop.gsub(re, '.'))
        non_digested = File.join(source)
        #log(:debug, "asset: #{ file } -> #{ non_digested }")
        FileUtils.ln(file, non_digested)
      end
    end

  #
    def url_for(url)
      uri = URI.parse(url.to_s)

      if uri.absolute?
        uri.to_s
      else
        relative_uri = URI.parse(@url)
        relative_uri.path = absolute_path_for(uri.path)
        relative_uri.query = uri.query
        relative_uri.fragment = uri.fragment
        relative_uri.to_s
      end
    end

  #
    def uri_for(url)
      uri = url.is_a?(URI) ? url : URI.parse(url.to_s)
    end

  #
    def hms(seconds)
      return unless seconds
      "%02d:%02d:%02d" % hours_minutes_seconds(seconds)
    end

  #
    def hours_minutes_seconds(seconds)
      return unless seconds
      seconds = Float(seconds).to_i
      hours, seconds = seconds.divmod(3600)
      minutes, seconds = seconds.divmod(60)
      [hours.to_i, minutes.to_s, seconds]
    end

  #
    def stopwatch(&block)
      a = Time.now
      result = block.call
      b = Time.now
      [result, b.to_f - a.to_f]
    end

  #
    def port_open?(port, options = {})
      seconds = options[:timeout] || 1
      ip = options[:ip] || '0.0.0.0'

      Timeout::timeout(seconds) do
        begin
          TCPSocket.new(ip, port).close
          false
        rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH
          true
        rescue Object
          false
        end
      end
    rescue Timeout::Error
      false
    end

  #
    def paths_for(*args)
      path = args.flatten.compact.join('/')
      path.gsub!(%r|[.]+/|, '/')
      path.squeeze!('/')
      path.sub!(%r|^/|, '')
      path.sub!(%r|/$|, '')
      paths = path.split('/')
    end

  #
    def absolute_path_for(*args)
      path = ('/' + paths_for(*args).join('/')).squeeze('/')
      path unless path.strip.empty?
    end

  #
    def relative_path_for(*args)
      path = absolute_path_for(*args).sub(%r{^/+}, '')
      path unless path.strip.empty?
    end

  #
    def relative_path(path, *args)
      options = args.last.is_a?(Hash) ? args.pop : {}
      path = path.to_s
      relative = args.shift || options[:relative] || options[:to] || options[:from]
      if relative
        Pathname.new(path).relative_path_from(Pathname.new(relative.to_s)).to_s
      else
        relative_path_for(path)
      end
    end

  #
    def spawn(command)
      oe = `#{ command } 2>&1`

      unless $? == 0
        msg = "command(#{ command }) failed with (#{ $? })"
        log(:error, msg)
        raise(msg)
      end

      oe
    end
  end

#
  class Server
    def Server.for(type, cli, *args, &block)
      type = type.to_s.strip.downcase

      case type
        when /puma/
          Puma.new(cli, *args, &block)
        when /passenger/
          Passenger.new(cli, *args, &block)
        else
          nil
      end
    end
    
    def initialize(cli)
      @cli = cli
    end

    def setup!
      nil
    end

    class Puma < Server
      def initialize(cli)
        @cli = cli

        @env = @cli.env
        @directory = @cli.directory
        @rails_root = @cli.rails_root
        @parallel = @cli.parallel

        @puma = "bundle exec puma"
        @pumactl = "bundle exec pumactl"

        @pidfile = @cli.relative_path(File.join(@directory, ".puma-pid.txt"), :from => @cli.rails_root)
        @statefile = @cli.relative_path(File.join(@directory, ".puma-state.txt"), :from => @cli.rails_root)
      end

      def start_command_for(port)
        %W[
          #{ @puma }
          --pidfile=#{ @pidfile }
          --state=#{ @statefile }
          --port=#{ port }
          --environment=#{ @env }
          --workers=#{ @parallel }
          --config=/dev/null
          --threads=1:1
          --preload
          --daemon
          ./config.ru
        ].join(' ').strip
      end

      def stop_command_for(port)
        %W[
         #{ @pumactl }
         --pidfile=#{ @pidfile }
         --state=#{ @statefile }
         stop
        ].join(' ').strip
      end

      def cleanup!(*args)
        nil
      end
    end

    class Passenger < Server
      def initialize(cli)
        @cli = cli

        @env = @cli.env
        @directory = @cli.directory
        @rails_root = @cli.rails_root
        @parallel = @cli.parallel

        @passenger = "bundle exec passenger"
      end

      def start_command_for(port)
        "#{ @passenger } start --daemonize --environment #{ @env } --port #{ port } --max-pool-size #{ @parallel }"
      end

      def stop_command_for(port)
        "#{ @passenger } stop --port #{ port }"
      end

      def cleanup!(*args)
        options = args.last.is_a?(Hash) ? args.pop : {}
        port = options[:port]
        FileUtils.rm_rf("#{ @rails_root }/tmp/pids/passenger.#{ port }.pid")
      end

      def setup!
        begin
          require 'phusion_passenger'
        rescue LoadError => le
          abort "please add `gem 'passenger'` to your Gemfile"
        end
      end
    end
  end
end
